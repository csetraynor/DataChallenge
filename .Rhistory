.libPaths()
.libPaths("C:/RFolder/R-3.4.2/library")
install.pa]
install.packages("tidyverse")
install.packages("tidyverse")
library(tidyverse)
# read in all three datasets (you'll pick one to use later)
recpies <- read_csv("../input/epirecipes/epi_r.csv")
bikes <- read_csv("../input/nyc-east-river-bicycle-crossings/nyc-east-river-bicycle-counts.csv")
weather <- read_csv("../input/szeged-weather")
# read in all three datasets (you'll pick one to use later)
recpies <- read_csv("../input/epirecipes/epi_r.csv")
bikes <- read_csv("../input/nyc-east-river-bicycle-crossings/nyc-east-river-bicycle-counts.csv")
weather <- read_csv("../input/szeged-weather")
# read in all three datasets (you'll pick one to use later)
recpies <- read_csv("epi_r.csv")
bikes <- read_csv("nyc-east-river-bicycle-crossings/nyc-east-river-bicycle-counts.csv")
weather <- read_csv("szeged-weather")
bikes <- read_csv("nyc-east-river-bicycle-counts.csv")
weather <- read_csv("weatherHistory")
weather <- read_csv("weatherHistory.csv")
# quickly clean our dataset
recpies <- recpies %>%
filter(calories < 10000) %>% # remove outliers
na.omit() # remove rows with NA values
# are the ratings all numeric?
print("Is this variable numeric?")
is.numeric(recpies$rating)
# are the ratings all integers?
print("Is this variable only integers?")
all.equal(recpies$rating, as.integer(recpies$rating)) == T
# plot & add a regression line
ggplot(recpies, aes(x = calories, y = dessert)) + # draw a
geom_point() + # add points
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "binomial")) # ...from the binomial family
#we choose weather
weather <- read_csv("weatherHistory.csv")
# quickly clean our dataset
weather <- weather %>%
na.omit() # remove rows with NA values
# check category temperature
print("Is this variable numeric?")
is.numeric(weather$temperature)
is.numeric(weather$`Temperature (C)`)
# check category temperature
print("Is temperature a numeric variable?")
is.numeric(weather$`Temperature (C)`)
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = Summary )) + # draw a
geom_point() + # add points
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "multinomial")) # ...from the binomial family
weather <- weather %>%
Summary <- as.factor(Summary)
weather$Summary <- as.factor(weather$Summary)
levels(weather$Summary)
ddply(weather(Summary),  summarise, sumcount = count(Summary))
library(plyr)
library(dplyr)
ddply(weather(Summary),  summarise, sumcount = count(Summary))
ddply(weather, (Summary),  summarise, sumcount = count(Summary))
ddply(weather, .(Summary),  summarise, sumcount = count(Summary))
ddply(weather, .(Summary),  mutate, sumcount = count(Summary))
weather %>%
group_by(Summary) %>%
summarise(no_rows = length(Summary))
weather %>%
group_by(Summary) %>%
summarise(no_rows = length(ID))
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = 'Daily Summary' )) + # draw a
geom_point() + # add points
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "multinomial")) # ...from the multinomial family
#we choose weather
weather <- read_csv("weatherHistory.csv")
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = `Daily Summary` )) + # draw a
geom_point() # ...from the multinomial family
# clean our dataset
weather <- weather %>%
na.omit() # remove rows with NA values
#Factor data
weather$Summary <- as.factor(weather$Summary)
weather %>%
group_by(Summary) %>%
summarise(no_rows = length(ID))
nrow(weather)
1:nrow(weather)
weather$ID <- 1:nrow(weather)
weather %>%
group_by(Summary) %>%
summarise(no_rows = length(ID))
weather
weather %>%
group_by(Summary) %>%
mutate(no_rows = length(ID))
weather$no_rows
weather %>%
group_by(Summary) %>%
mutate(no_rows = length(Summary))
weather$no_row
weather <- read_csv("weatherHistory.csv")
library(tidyverse)
install.packages("tidyverse")
weather <- read_csv("weatherHistory.csv")
library(tidyverse)
weather <- read_csv("weatherHistory.csv")
weather <- weather %>%
na.omit() # remove rows with NA values
print("Is temperature a numeric variable?")
is.numeric(weather$`Temperature (C)`)
print("Is wind speed a numeric variable?")
is.numeric(weather$`Wind Speed (km/h)`)
ggplot(weather, aes(x = `Temperature (C)`, y = `Wind Speed (km/h)` )) + # draw a
geom_point() +
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "normal")) # ...from the binomial family
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = `Wind Speed (km/h)` )) + # draw a
geom_point() +
scale_y_log10()+
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "gaussian"))
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = `Wind Speed (km/h)` )) + # draw a
geom_point() +
scale_x_log10()+
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "gaussian"))
is.numeric(weather$Humidity)
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = Humidity)) + # draw a
geom_point() +
scale_x_log10()+
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "gaussian")) # ...from the binomial family
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = Humidity)) + # draw a
geom_point() +
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "gaussian")) #
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = Humidity)) + # draw a
geom_point() +
scale_y_log10()+
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "gaussian"))
ggplot(weather, aes(x = `Temperature (C)`, y = Humidity)) + # draw a
geom_point() +
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "gaussian"))
# clean our dataset
weather <- weather %>%
na.omit()
filter(Humidity > 0) # remove rows with NA values
#Factor data
# clean our dataset
weather <- weather %>%
filter(Humidity > 0)
# plot & add a regression line
ggplot(weather, aes(x = `Temperature (C)`, y = Humidity)) + # draw a
geom_point() +
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "gaussian"))
# Day 1
library(tidyverse)
# read in all three datasets (you'll pick one to use later)
recpies <- read_csv("epi_r.csv")
bikes <- read_csv("nyc-east-river-bicycle-counts.csv")
weather <- read_csv("weatherHistory.csv")
# quickly clean our dataset
recpies <- recpies %>%
filter(calories < 10000) %>% # remove outliers
na.omit() # remove rows with NA values
# are the ratings all numeric?
print("Is this variable numeric?")
is.numeric(recpies$rating)
# are the ratings all integers?
print("Is this variable only integers?")
all.equal(recpies$rating, as.integer(recpies$rating)) == T
# plot & add a regression line
ggplot(recpies, aes(x = calories, y = dessert)) + # draw a
geom_point() + # add points
geom_smooth(method = "glm", # plot a regression...
method.args = list(family = "binomial")) # ...fro
survey <- read.csv("/home/carlos/R-Factory/survey_results_public.csv")
survey <- read.csv("/home/carlos/R-Factory/survey_results_public.csv")
library(tidyverse)
library(boot)
head(survey)
unique(survey$HoursPerWeek)
unique(survey$Salary)
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
unique(survey$HoursPerWeek)
unique(survey$Salary)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 0) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 0) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary)) >%>
filter(!is.na(HoursPerWeek))
unique(survey$HoursPerWeek)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 0) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary)) >%>
filter(!is.na(HoursPerWeek))
compensation_record <-survey %>%
filter(Salary > 0) %>%
filter(!is.na(HoursPerWeek)) >%>
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary)) >%>
compensation_record <-survey %>%
filter(Salary > 0) %>%
#filter(!is.na(HoursPerWeek)) >%>
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
unique(survey$HoursPerWeek)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 0) %>%
filter(!is.na(survey$HoursPerWeek)) >%>
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 0) %>%
filter(!is.na(HoursPerWeek)) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
mymodel <- glm(CleanedSalary ~ HoursPerWeek, data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
unique(survey$HoursPerWeek)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 0 & Salary < 150000) %>%
filter(!is.na(HoursPerWeek)) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
mymodel <- glm(CleanedSalary ~ HoursPerWeek, data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
glm.diag.plots(mymodel)
mymodel <- glm(CleanedSalary ~ inv(HoursPerWeek), data = compensation_record, family = poisson)
mymodel <- glm(CleanedSalary ~ (1/HoursPerWeek), data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
mymodel <- glm(CleanedSalary ~ (1/HoursPerWeek), data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
mymodel <- glm(CleanedSalary ~ log(HoursPerWeek), data = compensation_record, family = poisson)
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
unique(survey$HoursPerWeek)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 0 & Salary < 150000) %>%
filter(HoursPerWeek > 0 ) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
mymodel <- glm(CleanedSalary ~ log(HoursPerWeek), data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
mymodel <- glm(CleanedSalary ~ (HoursPerWeek), data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
unique(compensation_record$JobSatisfaction)
compensation_record <-compensation_record %>%
filter(!is.na(JobSatisfaction))
mymodel <- glm(CleanedSalary ~ (JobSatisfaction), data = compensation_record, family = poisson)
mymodel2 <- glm(CleanedSalary ~ (JobSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel2)
compensation_record <-compensation_record %>%
filter(!is.na(JobSatisfaction)) >%>
mutate(JobSatisfaction = as.numeric(JobSatisfaction))
compensation_record <-compensation_record %>%
filter(!is.na(JobSatisfaction)) %>%
mutate(JobSatisfaction = as.numeric(JobSatisfaction))
mymodel2 <- glm(CleanedSalary ~ (JobSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel2)
max(compensation_record$Salary)
compensation_record <-compensation_record %>%
filter(!is.na(CareerSatisfaction)) %>%
mutate(CareerSatisfaction = as.numeric(CareerSatisfaction))
mymodel3 <- glm(CleanedSalary ~ (CareerSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel3)
compensation_record <-compensation_record %>%
filter(!is.na(CareerSatisfaction)) %>%
mutate(CareerSatisfaction = as.numeric(CareerSatisfaction))
mymodel3 <- glm(CleanedSalary ~ (CareerSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel3)
min(compensation_record$Salary)
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
unique(survey$HoursPerWeek)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 9850 & Salary < 150000) %>%
filter(HoursPerWeek > 0 ) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
mymodel <- glm(CleanedSalary ~ (HoursPerWeek), data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
unique(compensation_record$JobSatisfaction)
#it does not seem a good predictor from the diagnostic model
#w
compensation_record <-compensation_record %>%
filter(!is.na(JobSatisfaction)) %>%
mutate(JobSatisfaction = as.numeric(JobSatisfaction))
mymodel2 <- glm(CleanedSalary ~ (JobSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel2)
min(compensation_record$Salary)
#we inspect career satisfaction
min(compensation_record$Salary)
#we inspect career satisfaction
compensation_record <-compensation_record %>%
filter(!is.na(CareerSatisfaction)) %>%
mutate(CareerSatisfaction = as.numeric(CareerSatisfaction))
mymodel3 <- glm(CleanedSalary ~ (CareerSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel3)
compensation_record <-compensation_record %>%
filter(!is.na(CareerSatisfaction)) %>%
mutate(CareerSatisfaction = as.numeric(CareerSatisfaction))
mymodel3 <- glm(CleanedSalary ~ (CareerSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel3)
min(compensation_record$CleanedSalary)
max(compensation_record$CleanedSalary)
compensation_record <-survey %>%
filter(Salary > 9850) %>%
filter(Salary < 150000) %>%
filter(HoursPerWeek > 0 ) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
max(compensation_record$CleanedSalary)
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
unique(survey$HoursPerWeek)
#do some data cleaning
compensation_record <-survey %>%
filter(Salary > 9850) %>%
filter(Salary < 150000) %>%
filter(HoursPerWeek > 0 ) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary))
max(compensation_record$CleanedSalary)
survey <- read_csv("/home/carlos/R-Factory/survey_results_public.csv")
head(survey)
unique(survey$HoursPerWeek)
#do some data cleaning
compensation_record <-survey %>%
filter(HoursPerWeek > 0 ) %>%
mutate(CleanedSalary = str_replace_all(Salary, "[[:punct:]]", "")) %>%
mutate(CleanedSalary = as.numeric(CleanedSalary)) %>%
filter(CleanedSalary > 0) %>%
filter(CleanedSalary < 150000)
max(compensation_record$CleanedSalary)
mymodel <- glm(CleanedSalary ~ (HoursPerWeek), data = compensation_record, family = poisson)
glm.diag.plots(mymodel)
#it does not seem a good predictor from the diagnostic model
#we inspect job satisfaction instead
compensation_record <-compensation_record %>%
filter(!is.na(JobSatisfaction)) %>%
mutate(JobSatisfaction = as.numeric(JobSatisfaction))
mymodel2 <- glm(CleanedSalary ~ (JobSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel2)
min(compensation_record$Salary)
#we inspect career satisfaction
compensation_record <-compensation_record %>%
filter(!is.na(CareerSatisfaction)) %>%
mutate(CareerSatisfaction = as.numeric(CareerSatisfaction))
mymodel3 <- glm(CleanedSalary ~ (CareerSatisfaction), data = compensation_record, family = poisson)
glm.diag.plots(mymodel3)
ggplot(compensation_record, aes(x = HoursPerWeek, y = CleanedSalary))+
geom_point()+
geom_smooth(method = "glm",
method.args = list(family = "poisson"))
